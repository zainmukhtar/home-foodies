//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeFoodies.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HomeFoodiesEntities : DbContext
    {
        public HomeFoodiesEntities()
            : base("name=HomeFoodiesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<LoginUser> LoginUsers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<StatusCode> StatusCodes { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<UOMType> UOMTypes { get; set; }
    
        public virtual int sp_Supplier_Delete(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Supplier_Delete", supplierIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Supplier_InsertUpdate(Nullable<int> supplierID, string fullName, string companyName, string supplierAddress, string supplierRegion, string supplierCity, Nullable<int> linkedLoginUserID, string contactNumber)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var supplierAddressParameter = supplierAddress != null ?
                new ObjectParameter("SupplierAddress", supplierAddress) :
                new ObjectParameter("SupplierAddress", typeof(string));
    
            var supplierRegionParameter = supplierRegion != null ?
                new ObjectParameter("SupplierRegion", supplierRegion) :
                new ObjectParameter("SupplierRegion", typeof(string));
    
            var supplierCityParameter = supplierCity != null ?
                new ObjectParameter("SupplierCity", supplierCity) :
                new ObjectParameter("SupplierCity", typeof(string));
    
            var linkedLoginUserIDParameter = linkedLoginUserID.HasValue ?
                new ObjectParameter("LinkedLoginUserID", linkedLoginUserID) :
                new ObjectParameter("LinkedLoginUserID", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Supplier_InsertUpdate", supplierIDParameter, fullNameParameter, companyNameParameter, supplierAddressParameter, supplierRegionParameter, supplierCityParameter, linkedLoginUserIDParameter, contactNumberParameter);
        }
    
        public virtual ObjectResult<LoginUserGetLogin> SP_LoginUserGetLogin(string userEmail)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginUserGetLogin>("SP_LoginUserGetLogin", userEmailParameter);
        }
    }
}
